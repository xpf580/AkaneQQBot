Metadata-Version: 2.1
Name: lazy
Version: 1.6
Summary: Lazy attributes for Python objects
Home-page: https://github.com/stefanholek/lazy
Author: Stefan H. Holek
Author-email: stefan@epy.co.at
License: BSD-2-Clause
Project-URL: Documentation, https://lazy.readthedocs.io/en/stable/
Keywords: decorator,lazy,lazy attribute,descriptor,property
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Requires-Python: !=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,>=2.7
Description-Content-Type: text/x-rst
License-File: LICENSE
Provides-Extra: docs
Requires-Dist: sphinx (==5.3.0) ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme (==1.0.0) ; extra == 'docs'
Provides-Extra: mypy
Requires-Dist: mypy ; extra == 'mypy'

====
lazy
====
----------------------------------
Lazy attributes for Python objects
----------------------------------

Package Contents
================

@lazy
    A decorator to create lazy attributes.

Overview
========

Lazy attributes are computed attributes that are evaluated only
once, the first time they are used.  Subsequent uses return the
results of the first call. They come handy when code should run

- *late*, i.e. just before it is needed, and
- *once*, i.e. not twice, in the lifetime of an object.

You can think of it as *deferred initialization*.
The possibilities are endless.

Typing
======

The decorator is fully typed. Type checkers can infer the type of
a lazy attribute from the return value of the decorated method.

Examples
========

The class below creates its ``store`` resource lazily:

.. code-block:: python

    from lazy import lazy

    class FileUploadTmpStore(object):

        @lazy
        def store(self):
            location = settings.get('fs.filestore')
            return FileSystemStore(location)

        def put(self, uid, fp):
            self.store.put(uid, fp)
            fp.seek(0)

        def get(self, uid, default=None):
            return self.store.get(uid, default)

        def close(self):
            if 'store' in self.__dict__:
                self.store.close()

Another application area is caching:

.. code-block:: python

    class PersonView(View):

        @lazy
        def person_id(self):
            return self.request.get('person_id', -1)

        @lazy
        def person_data(self):
            return self.session.query(Person).get(self.person_id)

Documentation
=============

For further details please refer to the `API Documentation`_.

.. _`API Documentation`: https://lazy.readthedocs.io/en/stable/


Changelog
=========

1.6 - 2023-09-14
----------------

- Implement ``lazy.__set_name__()`` which helps in cases like
  ``foo=lazy(_foo)``.
  [stefan]

- Update tox.ini for latest tox.
  [stefan]

- Add GitHub CI workflow.
  [stefan]

- Add .readthedocs.yaml file.
  [stefan]

- Pin sphinx and sphinx-rtd-theme versions in docs extra.
  [stefan]

- Add mypy extra which installs mypy.
  [stefan]

- Fix stray characters in keywords.
  [stefan]

1.5 - 2022-09-18
----------------

- Allow type checkers to infer the type of a lazy attribute.
  Thanks to Elias Keis and Palpatineli for their contributions.
  [elKei24] [Palpatineli]

- Add Python 3.8-3.11 to tox.ini. Remove old Python versions.
  [stefan]

- Replace deprecated ``python setup.py test`` in tox.ini.
  [stefan]

- Remove deprecated ``test_suite`` from setup.py.
  [stefan]

- Move metadata to setup.cfg and add a pyproject.toml file.
  [stefan]

- Include tests in sdist but not in wheel.
  [stefan]

1.4 - 2019-01-28
----------------

- Add MANIFEST.in.
  [stefan]

- Release as universal wheel.
  [stefan]

1.3 - 2017-02-05
----------------

- Support Python 2.6-3.6 without 2to3.
  [stefan]

- Add a LICENSE file.
  [stefan]

1.2 - 2014-04-19
----------------

- Remove setuptools from install_requires because it isn't.
  [stefan]

1.1 - 2012-10-12
----------------

- Use ``functools.wraps()`` properly; the list of attributes changes with
  every version of Python 3.
  [stefan]

1.0 - 2011-03-24
----------------

- Initial release.
